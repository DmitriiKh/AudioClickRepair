<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AudioClickRepair</name>
    </assembly>
    <members>
        <member name="P:AudioClickRepair.Data.AbstractFragment.StartPosition">
            <summary>
            Gets or sets relative position of the first sample of fragment.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.AbstractFragment.EndPosition">
            <summary>
            Gets relative position of the last sample of fragment.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.AbstractFragment.Length">
            <summary>
            Gets length of fragment.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractFragment.SetValue(System.Int32,System.Double)">
            <summary>
            Sets value of internal array using relative position.
            </summary>
            <param name="position">Relative position.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractFragment.GetValue(System.Int32)">
            <summary>
            Gets value from internal array using relative position.
            </summary>
            <param name="position">Relative position.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractFragment.GetInternalArray">
            <summary>
            Gets internal array of samples.
            </summary>
            <returns>Array of samples.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractFragment.SetInternalArray(System.Double[])">
            <summary>
            Replaces internal array.
            </summary>
            <param name="replacementArray">New internal array.</param>
        </member>
        <member name="T:AudioClickRepair.Data.AbstractPatch">
            <summary>
            Basic behavior for Patch class.
            </summary>
        </member>
        <member name="F:AudioClickRepair.Data.AbstractPatch.MinimalPredictionError">
            <summary>
            Minimal allowed value for prediction errors.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.#ctor(System.Double[],System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Data.AbstractPatch"/> class.
            </summary>
            <param name="patchedSamples">Array of corrected samples.</param>
            <param name="startPosition">Relative position of beginning of a sequence of
            samples in the input audio data.</param>
            <param name="errorLevelAtDetection">Prediction error to average
            error ratio.</param>
        </member>
        <member name="E:AudioClickRepair.Data.AbstractPatch.Updater">
            <summary>
            Updater that called when patch needs updating.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.AbstractPatch.ErrorLevelAtDetection">
            <summary>
            Gets error level at the start position that was found at detection process.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.AbstractPatch.CurrentErrorLevel">
            <summary>
            Gets current error level.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.AbstractPatch.Approved">
            <summary>
            Gets or sets a value indicating whether patch was approved by user.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_Equality(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions and lengths of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start positions and lengths of operands are equal.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_Inequality(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions and lengths of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start positions and lengths of operands are not equal.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_LessThan(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start position of the first operand is less.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_LessThanOrEqual(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start position of the first operand is less or equal.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_GreaterThanOrEqual(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start position of the first operand is larger or equal.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.op_GreaterThan(AudioClickRepair.Data.AbstractPatch,AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares start positions of operands.
            </summary>
            <param name="left">First operand.</param>
            <param name="right">Second operand.</param>
            <returns>Returns true if start position of the first operand is larger.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.CompareTo(AudioClickRepair.Data.AbstractPatch)">
            <summary>
            Compares by position.
            </summary>
            <param name="otherPatch">Other instance.</param>
            <returns>Result of CompareTo of StartPosition.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.Equals(System.Object)">
            <summary>
            Checks if start positions are equal.
            </summary>
            <param name="obj">Object.</param>
            <returns>Returns true if start positions are equal.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.GetHashCode">
            <summary>
            Gets hash code based on start position and length.
            </summary>
            <returns>Returns hash code.</returns>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.OnChange(AudioClickRepair.Data.PatchEventArgs)">
            <summary>
            Invokes Updater method and then updates internal array,
            start position and current error level.
            </summary>
            <param name="args">Arguments (input and output).</param>
        </member>
        <member name="M:AudioClickRepair.Data.AbstractPatch.ChangeApproved">
            <summary>
            Toggles approved state.
            </summary>
        </member>
        <member name="T:AudioClickRepair.Data.ArrayFragment">
            <summary>
            Contains a sequence of samples from a larger array.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.ArrayFragment.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Data.ArrayFragment"/> class.
            </summary>
            <param name="internalArray">Contains short sequence of samples.</param>
            <param name="startPosition">Relative position of the first sample.</param>
        </member>
        <member name="M:AudioClickRepair.Data.ArrayFragment.#ctor(System.Collections.Immutable.ImmutableArray{System.Double},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Data.ArrayFragment"/> class
            and copies samples from immutable array.
            </summary>
            <param name="immutableArray">Source of samples.</param>
            <param name="rangeStart">Relative position of the first sample.</param>
            <param name="rangeLength">Length of sequence to be copied.</param>
            <returns>RangeData.</returns>
        </member>
        <member name="T:AudioClickRepair.Data.ChannelType">
            <summary>
            Audio channel type (left or right).
            </summary>
        </member>
        <member name="F:AudioClickRepair.Data.ChannelType.Left">
            <summary>
            Left audio channel.
            </summary>
        </member>
        <member name="F:AudioClickRepair.Data.ChannelType.Right">
            <summary>
            Right audio channel.
            </summary>
        </member>
        <member name="T:AudioClickRepair.Data.Mono">
            <summary>
                Represents mono audio samples and includes information
                about damaged samples
            </summary>
        </member>
        <member name="T:AudioClickRepair.Data.Patch">
            <summary>
            Contains information on sequences of damaged samples.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.Patch.#ctor(System.Double[],System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Data.Patch"/> class.
            </summary>
            <param name="patchedSamples">Array of corrected samples.</param>
            <param name="startPosition">Relative position of beginning of a sequence of
            samples in the input audio data.</param>
            <param name="errorLevelAtDetection">Prediction error to average
            error ratio.</param>
        </member>
        <member name="M:AudioClickRepair.Data.Patch.ExpandLeft">
            <summary>
            Expands patch on beginning.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.Patch.ShrinkLeft">
            <summary>
            Shortens patch on beginning.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.Patch.ShrinkRight">
            <summary>
            Shortens patch on end.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.Patch.ExpandRight">
            <summary>
            Expands patch on end.
            </summary>
        </member>
        <member name="T:AudioClickRepair.Data.PatchEventArgs">
            <summary>
            Arguments for calling event handler.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Data.PatchEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Data.PatchEventArgs"/> class.
            </summary>
            <param name="newStartPosition">Start position of fragment.</param>
            <param name="newLength">Length of fragment.</param>
        </member>
        <member name="P:AudioClickRepair.Data.PatchEventArgs.Patched">
            <summary>
            Gets fragment. Needs to be updated by event handler.
            </summary>
        </member>
        <member name="P:AudioClickRepair.Data.PatchEventArgs.NewErrorLevelAtStart">
            <summary>
            Gets error level. Needs to be updated by event handler.
            </summary>
        </member>
        <member name="T:AudioClickRepair.Data.Stereo">
            <summary>
                Represents stereo audio samples and includes information
                about damaged samples
            </summary>
        </member>
        <member name="T:AudioClickRepair.Processing.FastBurgAlgorithm64">
            <summary>
                Fast implimentation of Burg algorithm for real signals.
                For details see paper A Fast Implementation of Burg’s Method by Koen Vos.
                FastBurgAlgorithm64 uses internal variables of type double
            </summary>
        </member>
        <member name="F:AudioClickRepair.Processing.FastBurgAlgorithm64._absolutePosition">
            <summary>
                Position in x_inputSignal that we need prediction for.
            </summary>
        </member>
        <member name="F:AudioClickRepair.Processing.FastBurgAlgorithm64._deltaRAndAProduct">
            <summary>
                Product of deltaR matrix and a_predictionCoefs
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.Train(System.Int32,System.Int32,System.Int32)">
            <summary>
                Calculates prediction coefficients for one sample using CPU
            </summary>
            <param name="position">
                Position in inputSignal that we need
                prediction for. Must be greater than historyLengthSamples
            </param>
            <param name="coefficientsNumber">
                Number of prediction coefficients
                that will be calculated. Greater number gives more accurate
                prediction but takes more time to calculate
            </param>
            <param name="historyLengthSamples">
                Number of samples that will
                be used to calculate prediction coefficients
            </param>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.CreateInternalVariables">
            <summary>
                Creates internal variables with desirable length
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.GetForwardPrediction">
            <summary>
                Returns forward prediction based on prediction coefficients that were
                previously calculated with Train() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.GetBackwardPrediction">
            <summary>
                Returns backward prediction based on prediction coefficients that were
                previously calculated with Train() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.GetPredictionCoefs">
            <summary>
                Returns prediction coefficients that were
                previously calculated with Train() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.GetReflectionCoefs">
            <summary>
                Returns prediction coefficients that were
                previously calculated with Train() method
            </summary>
            <returns></returns>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.UpdateG">
            <summary>
                Updates vector g. For details see step 7 of algorithm on page 3 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.ComputeDeltaRMultByA">
            <summary>
                Calculates vector deltaRAndAProduct. For details see step 6 of algorithm on page 3 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.UpdateR">
            <summary>
                Updates vector r. For details see step 5 of algorithm on page 3 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.UpdatePredictionCoefs">
            <summary>
                Updates vector of prediction coefficients. For details see step 2 of
                algorithm on page 3 of A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.ComputeReflectionCoef">
            <summary>
                Computes vector of reflection coefficients. For details see step 1
                of algorithm on page 3 of A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.JinversOrder(System.Int32,System.Int32)">
            <summary>
                Inverts index to flip a vector insted of multiplication with J matrix.
                For details see (12) on page 2 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
            <param name="index">from 0 to max</param>
            <param name="max">positive number</param>
            <returns></returns>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.Initialization">
            <summary>
                Initializes i_iterationCounter and vectors. For details see step 0 of
                algorithm on page 3 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.FastBurgAlgorithm64.FindAutocorrelations">
            <summary>
                Calculates autocorrelations. For details see step 0 of
                algorithm on page 3 of
                A Fast Implementation of Burg’s Method by Koen Vos
            </summary>
        </member>
        <member name="T:AudioClickRepair.Processing.IAnalyzer">
            <summary>
            IAnalyzer interface.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.IAnalyzer.GetInputDataSize">
            <summary>
            Returns size of input data array needed to perform calculations.
            </summary>
            <returns>Size.</returns>
        </member>
        <member name="M:AudioClickRepair.Processing.IAnalyzer.GetDefaultResult">
            <summary>
            Returns default result. Can be used if calculation can not be done.
            </summary>
            <returns>Default result.</returns>
        </member>
        <member name="M:AudioClickRepair.Processing.IAnalyzer.GetResult(System.Double[])">
            <summary>
            Returns result of calculation.
            </summary>
            <param name="inputData">Input data.</param>
            <returns>Result.</returns>
        </member>
        <member name="T:AudioClickRepair.Processing.Patcher">
            <summary>
            Replaces samples from immutable array that were patched using update function.
            </summary>
        </member>
        <member name="M:AudioClickRepair.Processing.Patcher.#ctor(System.Collections.Immutable.ImmutableArray{System.Double},System.Collections.Concurrent.BlockingCollection{AudioClickRepair.Data.AbstractPatch},System.Func{AudioClickRepair.Data.AbstractPatch,System.Int32,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:AudioClickRepair.Processing.Patcher"/> class.
            </summary>
            <param name="immutableArray">Immutable array of samples.</param>
            <param name="patchCollection">Collection of patches.</param>
            <param name="updateFunc">Function to call to get the patched value.
            Example: (patch, position) => patch.GetOutputSample(position).</param>
        </member>
        <member name="M:AudioClickRepair.Processing.Patcher.GetRange(System.Int32,System.Int32)">
            <summary>
            Gets array containing sequence of patched samples of specified length
            starting from the specified position.
            </summary>
            <param name="start">Start position of range.</param>
            <param name="length">Length of range.</param>
            <returns>Array of patched samples.</returns>
        </member>
    </members>
</doc>
